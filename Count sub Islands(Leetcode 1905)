class Solution {
    static int directions[][]={{-1,0},{0,1},{1,0},{0,-1}};
    public static boolean dfs(int i,int j,int[][] grid1,int[][] grid2,boolean[][] visited){
        int m=grid1.length;
        int n=grid1[0].length;
    
        visited[i][j]=true;
        boolean is1=true;
        if(grid1[i][j]==0)
            is1=false;
        for(int dir[]:directions){
            int x=i+dir[0];
            int y=j+dir[1];
            if(x>=0 && y>=0 && x<m && y<n && grid2[x][y]==1 && visited[x][y]==false){
                boolean result=dfs(x,y,grid1,grid2,visited);
                is1=is1&&result;
            }
        }
        return is1;
        
    }
    public int countSubIslands(int[][] grid1, int[][] grid2) {
        int m=grid1.length;
        int n=grid1[0].length;
        boolean visited[][]=new boolean[m][n];
        int count=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid2[i][j]!=0 && visited[i][j]==false){
                    if(dfs(i,j,grid1,grid2,visited))
                        count++;
                }
                    
            }
        }
        return count;
    }
}
