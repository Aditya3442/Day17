/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> q=new LinkedList<>();
        List<List<Integer>> l=new ArrayList<>();
        if(root==null)
            return l;
        q.offer(root);
        while(!q.isEmpty()){
            int n=q.size();
            List<Integer> list=new ArrayList<>();
            while(n!=0){
                if(q.peek().left!=null)
                    q.offer(q.peek().left);https://leetcode.com/problems/binary-tree-level-order-traversal/
                if(q.peek().right!=null)
                    q.offer(q.peek().right);
                list.add(q.poll().val);
                n--;
            }
            l.add(list);
        }
        return l;
    }
}
